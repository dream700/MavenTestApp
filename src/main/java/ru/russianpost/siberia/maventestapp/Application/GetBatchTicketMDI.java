/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.russianpost.siberia.maventestapp.Application;

import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.MimetypesFileTypeMap;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author andy
 */
public class GetBatchTicketMDI extends javax.swing.JInternalFrame {

    File reqfile;

    /**
     * Creates new form GetBatchTicketMDI
     */
    public GetBatchTicketMDI() {
        initComponents();
        lbReq.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btFileLoad = new javax.swing.JButton();
        lbFilename = new javax.swing.JLabel();
        btRequest = new javax.swing.JButton();
        btExcel = new javax.swing.JButton();
        lbReq = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Пакетный запрос ШПИ");

        btFileLoad.setText("Загрузить файл");
        btFileLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFileLoadActionPerformed(evt);
            }
        });

        lbFilename.setText("Файл не выбран (загрузите .txt список)");

        btRequest.setText("Запросить на сервере");
        btRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRequestActionPerformed(evt);
            }
        });

        btExcel.setText("Выгрузить Excel");
        btExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcelActionPerformed(evt);
            }
        });

        lbReq.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btExcel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btRequest)
                        .addGap(33, 33, 33)
                        .addComponent(lbReq))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btFileLoad)
                        .addGap(35, 35, 35)
                        .addComponent(lbFilename)))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btFileLoad)
                    .addComponent(lbFilename))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRequest)
                    .addComponent(lbReq))
                .addGap(18, 18, 18)
                .addComponent(btExcel)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    Читаем из файла данные и записываем в таблицу ticket
     */
    private boolean readFromFileTickets(File file) {
        lbFilename.setText(file.getName());
        boolean result = false;
        try {
            List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);
            try { // Call Web Service Operation
                GetBatchTicketSRV_Service service = new GetBatchTicketSRV_Service();
                GetBatchTicketSRV port = service.getGetBatchTicketSRVPort();
                result = port.getBatchTickets(lines);
            } catch (Exception ex) {
                Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
            }
            lines.clear();
        } catch (IOException ex) {
            Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    private void btFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFileLoadActionPerformed
        this.setCursor((Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)));
        JFileChooser saveFile = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CVS & XLS Files", "txt", "cvs", "xls");
        saveFile.setFileFilter(filter);
        if (saveFile.showDialog(null, "Выберите файл") == JFileChooser.APPROVE_OPTION) {
            reqfile = saveFile.getSelectedFile();
            String filename = reqfile.getName().toLowerCase();
            if ((filename.indexOf("txt") > 0) | (filename.indexOf("cvs") > 0)) {
                readFromFileTickets(reqfile);
            } else if (filename.indexOf("xls") > 0) {
                readFromExcelTickets(reqfile);
            }
        }
        this.setCursor((Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)));
    }//GEN-LAST:event_btFileLoadActionPerformed

    private void btRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRequestActionPerformed
    }//GEN-LAST:event_btRequestActionPerformed

    // заполнение строки (rowNum) определенного листа (sheet)
    // данными  из dataModel созданного в памяти Excel файла
    private int createSheetHeader(HSSFSheet sheet, int rowNum, Ticket t) {
        Row row = sheet.createRow(rowNum);
        row.createCell(0).setCellValue(t.getBarcode());
        row.createCell(1).setCellValue(t.getDateFetch().toString());
        row.createCell(2).setCellValue(t.isIsFinal());
        for (Historyrecord h : t.getHistoryrecord()) {
            Row r = sheet.createRow(++rowNum);
            r.createCell(1).setCellValue(h.getOperationAddressIndex());
            r.createCell(2).setCellValue(h.getOperDate().toString());
            r.createCell(3).setCellValue(h.getOperTypeID());
            r.createCell(4).setCellValue(h.getOperTypeName());
            r.createCell(5).setCellValue(h.getOperAttrID());
            r.createCell(6).setCellValue(h.getOperAttrName());
            r.createCell(7).setCellValue(h.getOperatonDelta());
        }
        return rowNum;
    }

    private File GetFileRequest(boolean isSave, FileNameExtensionFilter filter) {
        JFileChooser saveFile = new JFileChooser();
        saveFile.setFileFilter(filter);
        if (isSave) {
            if (saveFile.showDialog(null, "Выберите файл") == JFileChooser.APPROVE_OPTION) {
                return saveFile.getSelectedFile();
            }
        } else {
            if (saveFile.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                return saveFile.getSelectedFile();
            }
        }
        return null;
    }

    private void btExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcelActionPerformed
        if (reqfile == null) {
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "TXT & CVS Files", "txt", "cvs");
            reqfile = GetFileRequest(true, new FileNameExtensionFilter("TXT & CVS Files", "txt", "cvs"));
            if (reqfile == null) {
                return;
            }
        }
        
        File saveFile = GetFileRequest(true,new FileNameExtensionFilter("XLS Files", "xls"));
        if (saveFile != null) {
            try {
                this.setCursor((Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)));

                // создание самого excel файла в памяти
                HSSFWorkbook workbook = new HSSFWorkbook();
                // создание листа с названием "Просто лист"
                HSSFSheet sheet = workbook.createSheet("Просто лист");

                List<String> lines = Files.readAllLines(reqfile.toPath(), StandardCharsets.UTF_8);
                // счетчик для строк
                int rowNum = 0;
                // создаем подписи к столбцам (это будет первая строчка в листе Excel файла)
                Row row = sheet.createRow(rowNum);
                row.createCell(0).setCellValue("ШПИ");
                row.createCell(1).setCellValue("Дата");
                row.createCell(2).setCellValue("Финал");
                ViewHistorySERV_Service service = new ViewHistorySERV_Service();
                ViewHistorySERV port = service.getViewHistorySERVPort();
                for (String line : lines) {
                    try { // Call Web Service Operation
                        Ticket tk = port.findTicket(line);
                        if (tk != null) {
                            rowNum = createSheetHeader(sheet, ++rowNum, tk);
                        }
                    } catch (Exception ex) {
                        // TODO handle custom exceptions here
                    }
                }
                // записываем созданный в памяти Excel документ в файл
                try (FileOutputStream f = new FileOutputStream(saveFile)) {
                    workbook.write(f);
                } catch (IOException ex) {
                    Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setCursor((Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)));
        }
    }//GEN-LAST:event_btExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExcel;
    private javax.swing.JButton btFileLoad;
    private javax.swing.JButton btRequest;
    private javax.swing.JLabel lbFilename;
    private javax.swing.JLabel lbReq;
    // End of variables declaration//GEN-END:variables

    private boolean readFromExcelTickets(File file) {
        lbFilename.setText(file.getName());
        boolean result = false;
        try {
            FileInputStream inputStream = new FileInputStream(file);
            // создание самого excel файла в памяти
            HSSFWorkbook workbook = new HSSFWorkbook(inputStream);
            // Get first sheet from the workbook
            HSSFSheet sheet = workbook.getSheetAt(0);
            // Get iterator to all the rows in current sheet
            Iterator<Row> rowIterator = sheet.iterator();
            List<String> lines = new ArrayList<>();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                // Get iterator to all cells of current row 
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    // Change to getCellType() if using POI 4.x
                    CellType cellType = cell.getCellTypeEnum();
                    switch (cellType) {
                        case NUMERIC:
                            Double value = cell.getNumericCellValue();
                            validateTicketFormat(lines, String.valueOf(value.toString()));
                            break;
                        case STRING:
                            validateTicketFormat(lines, cell.getStringCellValue());
                            break;
                    }
                }
            }
            try { // Call Web Service Operation
                GetBatchTicketSRV_Service service = new GetBatchTicketSRV_Service();
                GetBatchTicketSRV port = service.getGetBatchTicketSRVPort();
                result = port.getBatchTickets(lines);
            } catch (Exception ex) {
                Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
            }
            lines.clear();
        } catch (IOException ex) {
            Logger.getLogger(GetBatchTicketMDI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    private boolean validateTicketFormat(List<String> lines, String barcode) {
        if (true) {
            lines.add(barcode.toUpperCase());
        }
        return true;
    }
}
